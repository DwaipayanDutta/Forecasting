# Creating function to choose best model for forecasting using RMSE
funcfcastSmoothAllOutput <- function(x, h, d){
  
  # Creating train and test set from time series 
  train.x <- subset(x, end = round(length(x)*0.8,0))
  test.x <- subset(x, start = round(length(x)*0.8,0)+1)
  
  # Calculating forecast horizon for measuring accuracy
  test.h <- length(test.x)
  
  # Forecasting using average method
  fcast.mean <- meanf(train.x, h = test.h)
  # print("fcast.meanT")
  
  # Forecasting using naive method
  fcast.naive <- naive(train.x, h = test.h)
  # print("fcast.naiveT")
  
  # Forecasting using snaive method
  fcast.snaive <- snaive(train.x, h = test.h)
  # print("fcast.snaiveT")
  
  # # Forecasting using drift method
  # fcast.drift <- rwf(train.x, h = test.h, drift=TRUE)
  # # print("fcast.driftT")
  
  # Forecasting using regression method
  fit.tslm <- tslm(train.x ~ trend + season)
  fcast.tslm <- forecast(fit.tslm, h = test.h)
  # print("fcast.tslmT")
  
  # Forecasting using stlf method
  # fit.stlf <- stlf(train.x, s.window = "periodic")
  fit.stlf <- stlf(train.x)
  fcast.stlf <- forecast(fit.stlf, h = test.h)
  # print("fcast.stlT")
  
  # Forecasting using HoltWinter method
  fit.HoltWinters <- HoltWinters(train.x)
  fcast.HoltWinters <- forecast(fit.HoltWinters, h = test.h)
  # print("fcast.HoltWintersT")
  
  # Forecasting using ets method
  fit.ets <- ets(train.x)
  fcast.ets <- forecast(fit.ets, h = test.h)
  # print("fcast.etsT")
  
  # Forecasting using auto.arima method
  fit.autoarima <- auto.arima(train.x)
  fcast.autoarima <- forecast(fit.autoarima, h = test.h)
  # print("fcast.autoarimaT")
  
  # Forecasting using nnet method
  set.seed(222)
  fit.nn <- nnetar(train.x, lambda = 0.5)
  fcast.nn <- forecast(fit.nn, h = test.h)
  # print("fcast.nnT")
  
  # Calculating accuracy measures using each method on test data
  acc.mean <- round(accuracy(fcast.mean$mean, test.x),2)
  acc.naive <- round(accuracy(fcast.naive$mean, test.x),2)
  acc.snaive <- round(accuracy(fcast.snaive$mean, test.x),2)
  # acc.drift <- round(accuracy(fcast.drift$mean, test.x),2)
  acc.tslm <- round(accuracy(fcast.tslm$mean, test.x),2)
  acc.stlf <- round(accuracy(fcast.stlf$mean, test.x),2)
  acc.HoltWinters <- round(accuracy(fcast.HoltWinters$mean, test.x),2)
  acc.ets <- round(accuracy(fcast.ets$mean, test.x),2)
  acc.autoarima <- round(accuracy(fcast.autoarima$mean, test.x),2)
  acc.nn <- round(accuracy(fcast.nn$mean, test.x),2)
  
  # Creating table having accuracy measures using each method on test data
  acc.table <-
    cbind(
      Model = c(
        "mean",
        "naive",
        "snaive",
        # "drift",
        "tslm",
        "stlf",
        "HoltWinters",
        "ets",
        "autoarima",
        "nn"
      ),
      data.table(
        rbind(
          acc.mean[1, ],
          acc.naive[1, ],
          acc.snaive[1, ],
          # acc.drift[1, ],
          acc.tslm[1, ],
          acc.stlf[1, ],
          acc.HoltWinters[1, ],
          acc.ets[1, ],
          acc.autoarima[1, ],
          acc.nn[1, ]
        )
      )
    )
  
  # Choosing best model based on RMSE measure of accuracy
  bestFitModel <- min(acc.mean[2],
                      acc.naive[2],
                      acc.snaive[2],
                      # acc.drift[2],
                      acc.tslm[2],
                      acc.stlf[2],
                      acc.HoltWinters[2],
                      acc.ets[2],
                      acc.autoarima[2],
                      acc.nn[2])
  
  
  #### Forecasting only using best method ####
  if(bestFitModel == acc.mean[2]){
    fcast <- meanf(x, h = h)
    # print("mean")
  }
  if(bestFitModel == acc.naive[2]){
    fcast <- naive(x, h = h)
    # print("naive")
  }
  if(bestFitModel == acc.snaive[2]){
    fcast <- snaive(x, h = h)
    # print("snaive")
  }
  # if(bestFitModel == acc.drift[2]){
  #   fcast <- rwf(x, h = h, drift=TRUE)
  #   # print("drift")
  # }
  if(bestFitModel == acc.tslm[2]){
    fit <- tslm(x ~ trend + season)
    fcast <- forecast(fit, h = h)
    # print("regression")
  }
  if(bestFitModel == acc.stlf[2]){
    # fit <- stlf(x, s.window = "periodic")
    fit <- stlf(x)
    fcast <- forecast(fit, h = h)
    # print("stlf")
  }
  if(bestFitModel == acc.HoltWinters[2]){
    fit <- HoltWinters(x)
    fcast <- forecast(fit, h = h)
    # print("ets")
  }
  if(bestFitModel == acc.ets[2]){
    fit <- ets(x)
    fcast <- forecast(fit, h = h)
    # print("ets")
  }
  if(bestFitModel == acc.autoarima[2]){
    fit <- auto.arima(x)
    fcast <- forecast(fit, h = h)
    # print("autoarima")
  }
  if(bestFitModel == acc.nn[2]){
    set.seed(222)
    fit <- nnetar(x, lambda = 0.5)
    fcast <- forecast(fit, PI=TRUE, h = h)
    # print("nn")
  }
  
  #### Generating all forecasts ####
  
  # Forecasting using average method
  fcast.mean.f <- meanf(x, h=h)
  # print("fcast.meanT")
  
  # Forecasting using naive method
  fcast.naive.f <- naive(x, h=h)
  # print("fcast.naiveT")
  
  # Forecasting using snaive method
  fcast.snaive.f <- snaive(x, h=h)
  # print("fcast.snaiveT")
  
  # # Forecasting using drift method
  # fcast.drift <- rwf(train.x, h = test.h, drift=TRUE)
  # # print("fcast.driftT")
  
  # Forecasting using regression method
  fit.tslm.f <- tslm(x ~ trend + season)
  fcast.tslm.f <- forecast(fit.tslm.f, h=h)
  # print("fcast.tslmT")
  
  # Forecasting using stlf method
  # fit.stlf <- stlf(train.x, s.window = "periodic")
  fit.stlf.f <- stlf(x)
  fcast.stlf.f <- forecast(fit.stlf.f, h=h)
  # print("fcast.stlT")
  
  # Forecasting using HoltWinter method
  fit.HoltWinters.f <- HoltWinters(x)
  fcast.HoltWinters.f <- forecast(fit.HoltWinters.f, h=h)
  # print("fcast.HoltWintersT")
  
  # Forecasting using ets method
  fit.ets.f <- ets(x)
  fcast.ets.f <- forecast(fit.ets.f, h=h)
  # print("fcast.etsT")
  
  # Forecasting using auto.arima method
  fit.autoarima.f <- auto.arima(x)
  fcast.autoarima.f <- forecast(fit.autoarima.f, h=h)
  # print("fcast.autoarimaT")
  
  # Forecasting using nnet method
  set.seed(222)
  fit.nn.f <- nnetar(x, lambda = 0.5)
  fcast.nn.f <- forecast(fit.nn.f, PI=TRUE, h=h)

# Creating a table having all forecasted values after multiplying with respective days multipler   
fcastAll <-  data.table(cbind(
  c(fcast.mean.f$method,
        fcast.naive.f$method,
        fcast.snaive.f$method,
        fcast.tslm.f$method,
        fcast.stlf.f$method,
        fcast.HoltWinters.f$method,
        fcast.ets.f$method,
        fcast.autoarima.f$method,
        fcast.nn.f$method),
  rbind(as.numeric(round(fcast.mean.f$mean*d ,1)),
        as.numeric(round(fcast.naive.f$mean*d,1)),
        as.numeric(round(fcast.snaive.f$mean*d,1)),
        as.numeric(round(fcast.tslm.f$mean*d,1)),
        as.numeric(round(fcast.stlf.f$mean*d,1)),
        as.numeric(round(fcast.HoltWinters.f$mean*d,1)),
        as.numeric(round(fcast.ets.f$mean*d,1)),
        as.numeric(round(fcast.autoarima.f$mean*d,1)),
        as.numeric(round(fcast.nn.f$mean*d,1))),
  rbind(as.numeric(round(fcast.mean.f$upper[,1]*d,1)),
        as.numeric(round(fcast.naive.f$upper[,1]*d,1)),
        as.numeric(round(fcast.snaive.f$upper[,1]*d,1)),
        as.numeric(round(fcast.tslm.f$upper[,1]*d,1)),
        as.numeric(round(fcast.stlf.f$upper[,1]*d,1)),
        as.numeric(round(fcast.HoltWinters.f$upper[,1]*d,1)),
        as.numeric(round(fcast.ets.f$upper[,1]*d,1)),
        as.numeric(round(fcast.autoarima.f$upper[,1]*d,1)),
        as.numeric(round(fcast.nn.f$upper[,1]*d,1))),
  rbind(as.numeric(round(fcast.mean.f$lower[,1]*d,1)),
        as.numeric(round(fcast.naive.f$lower[,1]*d,1)),
        as.numeric(round(fcast.snaive.f$lower[,1]*d,1)),
        as.numeric(round(fcast.tslm.f$lower[,1]*d,1)),
        as.numeric(round(fcast.stlf.f$lower[,1]*d,1)),
        as.numeric(round(fcast.HoltWinters.f$lower[,1]*d,1)),
        as.numeric(round(fcast.ets.f$lower[,1]*d,1)),
        as.numeric(round(fcast.autoarima.f$lower[,1]*d,1)),
        as.numeric(round(fcast.nn.f$lower[,1]*d,1)))
  ))
  
colnames(fcastAll) <- c("Model",paste(c(gsub(" ","",as.character(yearmon(seq(attr(fcast.mean.f$mean, "tsp")[1],
                                                                                 attr(fcast.mean.f$mean, "tsp")[2],
                                                                                 by=1/attr(fcast.mean.f$mean, "tsp")[3]))))),"Mean",sep = ""),
                                    paste(c(gsub(" ","",as.character(yearmon(seq(attr(fcast.mean.f$mean, "tsp")[1],
                                                                                 attr(fcast.mean.f$mean, "tsp")[2],
                                                                                 by=1/attr(fcast.mean.f$mean, "tsp")[3]))))),"Upper80",sep = ""),
                                    paste(c(gsub(" ","",as.character(yearmon(seq(attr(fcast.mean.f$mean, "tsp")[1],
                                                                                 attr(fcast.mean.f$mean, "tsp")[2],
                                                                                 by=1/attr(fcast.mean.f$mean, "tsp")[3]))))),"Lower80",sep = ""))

fcastMean <- list(
    mean = round(fcast$mean,1),
    lower80 = round(fcast$lower[,1],1), 
    upper80 = round(fcast$upper[,1],1),
    method = fcast$method,
    rmse = bestFitModel,
    accuracyTable = acc.table,
    allForecasts = fcastAll
  )
    
  plot(fcast)
  print(acc.table)
  return(fcastMean)
}
